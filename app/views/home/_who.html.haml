%section#who-we-are
  %section
    %h1 Who we are

    %article.about-dockyard
      %h2 About DockYard
      %p DockYard is a software consultancy based in Boston, MA. We primarily service the Northeast, but have worked with companies on the West Coast and outside the US. We take pride in steering your project toward smart, simple solutions.

    %article.team
      %h2 The Team
      %ul
        %li
          .photo
            %img{ :src => '/assets/brian.jpg' }
          .info
            %h3
              Brian Cardarella
            .role
              Principal
            .github
              %a
                github
              
        %li
          .photo
            %img{ :src => '/assets/russ.jpg' }
          .info
            %h3
              Russell Jones
            .role
              Principal
            .github
              %a
                github
        %li
          .photo
            %img{ :src => '/assets/angelo.jpg' }
          .info
            %h3
              Angelo Simeoni
            .role
              Principal
            .github
              %a
                github


    -# %h2 Team
    -# %ul.team
    -#   - %w{}.each do |username|
    -#     %li.odd
    -#       .photo
    -#         %img{ :src => "/assets/#{username}.jpg" }
    -#         = link_to "http://twitter.com/#{username}", :class => 'twitter social', :title => 'Twitter', :target => '_blank' do
    -#           = image_tag 'icons/twitter-24x24-gray.png', :class => 'gray'
    -#           = image_tag 'icons/twitter-24x24-rust.png', :class => 'rust'

    -#         = link_to "https://github.com/#{username}", :class => 'github social', :title => 'Github', :target => '_blank' do
    -#           = image_tag 'icons/github-24x24-gray.png', :class => 'gray'
    -#           = image_tag 'icons/github-24x24-rust.png', :class => 'rust'
    -#       .info
    -#         %h3
    -#           Brian Cardarella &ndash; Principal
    -#         %p
    -#           Brian loves clean well-tested code. He is resistant to introducing unecessary complexities and
    -#           Brian loves clean well-tested code. He is resistant to introducing unecessary complexities and
    -#           Brian loves clean well-tested code. He is resistant to introducing unecessary complexities and
